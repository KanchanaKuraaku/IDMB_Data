IMDB Minihackthon 1.0


Basic query for Kaggle setup:


!pip install ipython_sql
%load_ext sql
import sqlite3
conn=sqlite3.connect('database.db')
%sql sqlite:///database.db
import pandas as pd
idmb_data=pd.read_csv('/kaggle/input/imdb-dataset-of-top-1000-movies-and-tv-shows/imdb_top_1000.csv')
idmb_data.to_sql('idmb_data',conn,if_exists='replace',index=False)


1. Director's Impact on Earnings
%%sql
UPDATE idmb_data
SET Gross = 0
WHERE Gross IS NULL;


%%sql
UPDATE idmb_data
SET Gross=CAST(REPLACE(Gross, ',', '') AS INTEGER);


%%sql
SELECT
     Director,
     Genre,
     Gross,
     CASE WHEN Gross = "0" THEN "0" ELSE RANK() OVER (PARTITION BY Gross ORDER BY Gross DESC) END AS Gross_rating
FROM
    idmb_data
ORDER BY
    Gross_rating ASC
LIMIT 20;


%%sql
SELECT
    Director,
    Gross,
    RANK() OVER (ORDER BY Gross DESC) AS Gross_rating
FROM
    idmb_data
ORDER BY
    Gross_rating ASC
LIMIT 20;


2. Genre Popularity Over the Years:
%%sql
SELECT 
     Released_year,
    Genre,
    COUNT(*) AS genre_count,
    SUM(Gross) AS total_earning
FROM
    idmb_data
GROUP BY
    Genre
ORDER BY
    genre_count DESC;
3. Correlation Between IMDB Ratings and Commercial Success
%%sql
SELECT 
     Series_Title,
     Gross,
     IMDB_rating
FROM
     idmb_data;
%%sql
WITH year_over_year_ratings AS (
  SELECT 
        Genre,
        Released_Year,
        COUNT(*) AS Genre_count,
        AVG(IMDB_rating) AS average_rating,
        LAG(AVG(IMDB_rating)) OVER (PARTITION BY Genre ORDER BY Released_Year) AS prevyear_rating
  FROM 
      idmb_data
  GROUP BY 
    Genre,
    Released_Year
)
SELECT
     Genre,
     Released_Year,
     Genre_count,
     average_rating,
     ((average_rating-prevyear_rating)/prevyear_rating)*100 AS percentage_change_of_rating
FROM 
     year_over_year_ratings
WHERE 
     prevyear_rating IS NOT NULL;
4. Impact of Movie Length on Ratings or Earnings
%%sql
UPDATE idmb_data
SET Runtime = CAST(REPLACE(Runtime, 'min','') AS REAL);


%%sql
SELECT 
    CASE
       WHEN Runtime <= 100 THEN 'Short'
       WHEN Runtime >= 101 AND Runtime <= 120 THEN 'Medium'
       ELSE 'Long'
    END AS movie_length,
    COUNT(*) AS movie_count,
    AVG(Gross) AS avg_gross
FROM
    idmb_data
GROUP BY
    movie_length;
  %%sql
SELECT
    CASE 
       WHEN Runtime > 45 THEN 'Very Short'
       WHEN Runtime >= 80 AND Runtime <= 100 THEN 'Short'
       WHEN Runtime >= 101 AND Runtime <= 120 THEN 'Medium'
       WHEN Runtime >= 121 AND Runtime <= 140 THEN 'Long'
       ELSE 'Very Long'
    END AS movie_length,
    COUNT(*) AS movie_count,
    AVG(Gross) AS avg_gross
FROM
    idmb_data
GROUP BY
    Movie_length;
5. Actor Influence on Movie Success:
%%sql
SELECT
     Star1,
     SUM(Gross) AS total_earning,
     AVG(Gross) AS avg_earning
FROM
    idmb_data
GROUP BY
    Star1


%%sql
WITH ActorData AS (
  SELECT Star1, Star2, Star3, Star4
  FROM idmb_data
)
SELECT
    Actor,
    SUM(Gross) AS total_earnings,
    AVG(Gross) AS avg_earnings,
    COUNT(*) AS movie_count,
    RANK() OVER (ORDER BY SUM(Gross) DESC) AS Actor_Rank
FROM (
    SELECT Star1 AS Actor FROM ActorData
    UNION ALL
    SELECT Star2 FROM ActorData
    UNION ALL
    SELECT Star3 FROM ActorData
    UNION ALL
    SELECT Star4 FROM ActorData
) AS ActorList
JOIN
    idmb_data ON ActorList.Actor = idmb_data.Star1 OR
                     ActorList.Actor = idmb_data.Star2 OR
                     ActorList.Actor = idmb_data.Star3 OR
                     ActorList.Actor = idmb_data.Star4
GROUP BY
    Actor;


6. Release Date Analysis
   %%sql
SELECT
     Released_year,
     SUM(Gross) AS total_earning,
     COUNT(*) AS movies_released
FROM
    idmb_data
GROUP BY
    Released_Year
ORDER BY
    total_earning DESC;